//L1 is a term from linguistics that means "native language"

//Types
type Boolean              = True | False;
type U64                  = /^[0-9]+$/;

//Implicit Operators
extern $"+"(x: U64, y: U64): U64 = $"+:(U64,U64)->U64";
extern $"-"(x: U64, y: U64): U64 = $"-:(U64,U64)->U64";
extern $"*"(x: U64, y: U64): U64 = $"*:(U64,U64)->U64";
extern $"/"(x: U64, y: U64): U64 = $"/:(U64,U64)->U64";
extern $"%"(x: U64, y: U64): U64 = $"%:(U64,U64)->U64";
extern $"=="(x: U64, y: U64): U64 = $"==:(U64,U64)->U64";
extern $"!="(x: U64, y: U64): U64 = $"!=:(U64,U64)->U64";
extern $"<"(x: U64, y: U64): U64 = $"<:(U64,U64)->U64";
extern $"<="(x: U64, y: U64): U64 = $"<=:(U64,U64)->U64";
extern $">"(x: U64, y: U64): U64 = $">:(U64,U64)->U64";
extern $">="(x: U64, y: U64): U64 = $">=:(U64,U64)->U64";

//Operators
let not(b:Boolean): Boolean = match b { True => False, False => True, };
let $"&&"(a:Boolean, b:Boolean): Boolean = match (a,b) { (True,True) => True, _ => False, };
let $"||"(a:Boolean, b:Boolean): Boolean = match (a,b) { (False,False) => False, _ => True, };
