
//Types
type Boolean = True | False;
type Integer        = /^(0|([-]?[1-9][0-9]*))$/;
type Whole          = /^(0|([1-9][0-9]*))$/;
type Tensor<T> = { };
type Set<E> = { };
type Map<K,V> = { };

type Even:Integer
     where. self%2 | 0;
type Odd:Integer
     where. self%2 | 1;

//Operators
let not(b:Boolean)             :Boolean = match b {
   True => False,
   False => True,
};
let $"&&"(a:Boolean, b:Boolean):Boolean = match (a,b) {
   (True,True) => True,
   _ => False,
};
let $"||"(a:Boolean, b:Boolean):Boolean = match (a,b) {
   (False,False) => False,
   _ => True,
};

let pos(x:Integer)             :Integer = x;
let neg(x:Integer)             :Integer = match x {
   literal '0' => literal '0',
   literal '-' xs => literal xs,
   literal xs => literal '-' xs,
};
let cat_with_carry(x:Whole, xs:Whole) :Whole = match (x,xs) {
   (_, literal d) => literal x d,
   (literal '0', literal '1' d) => literal '1' d,
   (literal '1', literal '1' d) => literal '2' d,
   (literal '2', literal '1' d) => literal '3' d,
   (literal '3', literal '1' d) => literal '4' d,
   (literal '4', literal '1' d) => literal '5' d,
   (literal '5', literal '1' d) => literal '6' d,
   (literal '6', literal '1' d) => literal '7' d,
   (literal '7', literal '1' d) => literal '8' d,
   (literal '8', literal '1' d) => literal '9' d,
   (literal '9', literal '1' d) => literal "10" d,
   _ => fail
};
let $"+"(x:Whole, y:Whole) :Whole = match (x,y) {
   (literal xp [0-9]xs, literal [0-9]ys) => cat_with_carry(literal xp:Whole, (literal xs:Whole)+(literal ys:Whole) ),
   (literal [0-9]xs, literal yp [0-9]ys) => cat_with_carry(literal yp:Whole, (literal xs:Whole)+(literal ys:Whole) ),
   (literal xp [0-9]xs, literal yp [0-9]ys) => cat_with_carry( (literal xp:Whole)+(literal yp:Whole), (literal xs:Whole)+(literal ys:Whole) ),

   //10x10 addition table
   (literal '0', literal '0') => literal "0",
   (literal '0', literal '1') => literal "1",
   (literal '0', literal '2') => literal "2",
   (literal '0', literal '3') => literal "3",
   (literal '0', literal '4') => literal "4",
   (literal '0', literal '5') => literal "5",
   (literal '0', literal '6') => literal "6",
   (literal '0', literal '7') => literal "7",
   (literal '0', literal '8') => literal "8",
   (literal '0', literal '9') => literal "9",

   (literal '1', literal '0') => literal "1",
   (literal '1', literal '1') => literal "2",
   (literal '1', literal '2') => literal "3",
   (literal '1', literal '3') => literal "4",
   (literal '1', literal '4') => literal "5",
   (literal '1', literal '5') => literal "6",
   (literal '1', literal '6') => literal "7",
   (literal '1', literal '7') => literal "8",
   (literal '1', literal '8') => literal "9",
   (literal '1', literal '9') => literal "10",

   (literal '2', literal '0') => literal "2",
   (literal '2', literal '1') => literal "3",
   (literal '2', literal '2') => literal "4",
   (literal '2', literal '3') => literal "5",
   (literal '2', literal '4') => literal "6",
   (literal '2', literal '5') => literal "7",
   (literal '2', literal '6') => literal "8",
   (literal '2', literal '7') => literal "9",
   (literal '2', literal '8') => literal "10",
   (literal '2', literal '9') => literal "11",

   (literal '3', literal '0') => literal "3",
   (literal '3', literal '1') => literal "4",
   (literal '3', literal '2') => literal "5",
   (literal '3', literal '3') => literal "6",
   (literal '3', literal '4') => literal "7",
   (literal '3', literal '5') => literal "8",
   (literal '3', literal '6') => literal "9",
   (literal '3', literal '7') => literal "10",
   (literal '3', literal '8') => literal "11",
   (literal '3', literal '9') => literal "12",

   (literal '4', literal '0') => literal "4",
   (literal '4', literal '1') => literal "5",
   (literal '4', literal '2') => literal "6",
   (literal '4', literal '3') => literal "7",
   (literal '4', literal '4') => literal "8",
   (literal '4', literal '5') => literal "9",
   (literal '4', literal '6') => literal "10",
   (literal '4', literal '7') => literal "11",
   (literal '4', literal '8') => literal "12",
   (literal '4', literal '9') => literal "13",

   (literal '5', literal '0') => literal "5",
   (literal '5', literal '1') => literal "6",
   (literal '5', literal '2') => literal "7",
   (literal '5', literal '3') => literal "8",
   (literal '5', literal '4') => literal "9",
   (literal '5', literal '5') => literal "10",
   (literal '5', literal '6') => literal "11",
   (literal '5', literal '7') => literal "12",
   (literal '5', literal '8') => literal "13",
   (literal '5', literal '9') => literal "14",

   (literal '6', literal '0') => literal "6",
   (literal '6', literal '1') => literal "7",
   (literal '6', literal '2') => literal "8",
   (literal '6', literal '3') => literal "9",
   (literal '6', literal '4') => literal "10",
   (literal '6', literal '5') => literal "11",
   (literal '6', literal '6') => literal "12",
   (literal '6', literal '7') => literal "13",
   (literal '6', literal '8') => literal "14",
   (literal '6', literal '9') => literal "15",

   (literal '7', literal '0') => literal "7",
   (literal '7', literal '1') => literal "8",
   (literal '7', literal '2') => literal "9",
   (literal '7', literal '3') => literal "10",
   (literal '7', literal '4') => literal "11",
   (literal '7', literal '5') => literal "12",
   (literal '7', literal '6') => literal "13",
   (literal '7', literal '7') => literal "14",
   (literal '7', literal '8') => literal "15",
   (literal '7', literal '9') => literal "16",

   (literal '8', literal '0') => literal "8",
   (literal '8', literal '1') => literal "9",
   (literal '8', literal '2') => literal "10",
   (literal '8', literal '3') => literal "11",
   (literal '8', literal '4') => literal "12",
   (literal '8', literal '5') => literal "13",
   (literal '8', literal '6') => literal "14",
   (literal '8', literal '7') => literal "15",
   (literal '8', literal '8') => literal "16",
   (literal '8', literal '9') => literal "17",

   (literal '9', literal '0') => literal "9",
   (literal '9', literal '1') => literal "10",
   (literal '9', literal '2') => literal "11",
   (literal '9', literal '3') => literal "12",
   (literal '9', literal '4') => literal "13",
   (literal '9', literal '5') => literal "14",
   (literal '9', literal '6') => literal "15",
   (literal '9', literal '7') => literal "16",
   (literal '9', literal '8') => literal "17",
   (literal '9', literal '9') => literal "18",
};
let $"+"(x:Integer, y:Integer) :Integer = match (x,y) {
   (literal '0', _) => y,
   (_, literal '0') => x,
   (literal '-' xs, literal '-' ys) => neg(((literal xs:Whole) + (literal ys:Whole)) as Integer),
   (literal '-' xs, literal ys) => fail,
   (literal xs, literal '-' ys) => fail,
   (literal xs, literal ys) => (((literal xs:Whole) + (literal ys:Whole)) as Integer),
};
let $"-"(x:Integer, y:Integer) :Integer = x + -y;
let $"*"(x:Integer, y:Integer) :Integer; //mul
let $"/"(x:Integer, y:Integer) :Integer; //div
let $"%"(x:Integer, y:Integer) :Integer = match (x,y) {
   literal '0' => literal '0',
   (literal '0', literal '1') => literal '0',
   (literal '0'a, literal '1') => literal a,
   (literal '0'a b, literal '1') => literal a b,
   (literal '0'a b '0', literal '1') => literal a b,
   (literal '0'a b '0'c, literal '1') => literal a b c,
   (literal '0'a '0'b, literal '1') => literal a b,
   (literal "00", literal '1') => literal "00",
   (literal "00"a, literal '1') => literal a,
   (literal [0-9], literal '1') => literal '0',
   (literal [0-9]a, literal '1') => literal a,
   (literal [0-9]a b, literal '1') => literal a b,
   (literal [0-9]a b [0-9]c, literal '1') => literal a b c,
};
let $"^"(x:Integer, y:Integer) :Integer; //pow

let $"=="(x:Integer, y:Integer):Boolean = match (x,y) {
   (n,n) => True,
   _ => False,
};
let $"!="(x:Integer, y:Integer):Boolean = not(x == y);
let $"<"(x:Integer, y:Integer)  :Boolean = match (x,y) {
   (literal n, literal n) => False,
   (literal '-' xs, literal '-' ys) => not((literal xs: Whole) < (literal ys: Whole)),
   (literal '-' _, _) => True,
   (_, literal '-' _) => False,
   (literal xs, literal ys) => ((literal xs: Whole) < (literal ys: Whole)),
};
let $"<"(x:Whole, y:Whole)  :Boolean = match (x,y) {
   (literal '0', literal [1-9]) => True,
   (literal '1', literal [2-9]) => True,
   (literal '2', literal [3-9]) => True,
   (literal '3', literal [4-9]) => True,
   (literal '4', literal [5-9]) => True,
   (literal '5', literal [6-9]) => True,
   (literal '6', literal [7-9]) => True,
   (literal '7', literal [8-9]) => True,
   (literal '8', literal '9') => True,
   (literal [0-9], literal [0-9]) => False,
   (literal [0-9], literal [1-9] [0-9]) => True,
   (literal [1-9] [0-9], literal [0-9]) => False,
   (literal p [0-9]sx, literal p [0-9]sy) => ((literal sx: Whole) < (literal sy: Whole)),
   (literal px [0-9]sx, literal py [0-9]) => ((literal px: Whole) < (literal py: Whole)),
};
let $"<="(x:Integer, y:Integer) :Boolean = x==y || x<y;
let $">"(x:Integer, y:Integer)  :Boolean = not(x <= y);
let $">="(x:Integer, y:Integer) :Boolean = not(x < y);

//Sugar
let $"for"(ls: Tensor<A>, A -> B): Tensor<B>;
let $"for"(ls: Tensor<A>, A -> Boolean, A -> B): Tensor<B>;

let set(ls: Tensor<A>): Set<A>;
let map(ls: Tensor<(A,B)>): Map<A,B>;

let range(end: Integer): Tensor<Integer>;
let range(start: Integer, end: Integer): Tensor<Integer>;
let range(start: Integer, end: Integer, step: Integer): Tensor<Integer>;

let tensor(): Tensor<A>;
let tensor(a: A): Tensor<A>;
let tensor(a: A, b: A): Tensor<A>;
let tensor(a: A, b: A, c: A): Tensor<A>;
