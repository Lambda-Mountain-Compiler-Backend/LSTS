//: Definition of prelude types and kinds
type Boolean = True | False;
type Integer;   forall :X::Integer.   X => Number;
type Real;      forall :X::Real.      X => Number;
type Imaginary; forall :X::Imaginary. X => Number;

//: SI Units
type Second :: Unit;  forall :X::Second.  X => Number;
type Metre :: Unit;   forall :X::Metre.   X => Number;
type Gram :: Unit;    forall :X::Gram.    X => Number;
type Ampere :: Unit;  forall :X::Ampere.  X => Number;
type Kelvin :: Unit;  forall :X::Kelvin.  X => Number;
type Mole :: Unit;    forall :X::Mole.    X => Number;
type Candela :: Unit; forall :X::Candela. X => Number;

//: SI Metric Prefixes
type Yotta<U::Unit> :: Unit;
type Zetta<U::Unit> :: Unit;
type Exa<U::Unit> :: Unit;
type Peta<U::Unit> :: Unit;
type Tera<U::Unit> :: Unit;
type Giga<U::Unit> :: Unit;
type Mega<U::Unit> :: Unit;
type Kilo<U::Unit> :: Unit;
type Hecto<U::Unit> :: Unit;
type Deca<U::Unit> :: Unit;

//: SI Metric Prefixes, boxing
forall u:U,Yotta<U>. U => Yotta<U> = 1000000000000000000000000 * u;
forall u:U,Zetta<U>. U => Zetta<U> = 1000000000000000000000 * u;
forall u:U,Exa<U>.   U => Exa<U>   = 1000000000000000000 * u;
forall u:U,Peta<U>.  U => Peta<U>  = 1000000000000000 * u;
forall u:U,Tera<U>.  U => Tera<U>  = 1000000000000 * u;
forall u:U,Giga<U>.  U => Giga<U>  = 1000000000 * u;
forall u:U,Mega<U>.  U => Mega<U>  = 1000000 * u;
forall u:U,Kilo<U>.  U => Kilo<U>  = 1000 * u;
forall u:U,Hecto<U>. U => Hecto<U> = 100 * u;
forall u:U,Deca<U>.  U => Deca<U>  = 10 * u;

forall u:U,Deci<U>.  U => Deci<U>  = u / 10;
forall u:U,Centi<U>. U => Centi<U> = u / 100;
forall u:U,Milli<U>. U => Milli<U> = u / 1000;
forall u:U,Micro<U>. U => Micro<U> = u / 1000000;
forall u:U,Nano<U>.  U => Nano<U>  = u / 1000000000;
forall u:U,Pico<U>.  U => Pico<U>  = u / 1000000000000;
forall u:U,Femto<U>. U => Femto<U> = u / 1000000000000000;
forall u:U,Atto<U>.  U => Atto<U>  = u / 1000000000000000000;
forall u:U,Zepto<U>. U => Zepto<U> = u / 1000000000000000000000;
forall u:U,Yocto<U>. U => Yocto<U> = u / 1000000000000000000000000;

//: SI Metric Prefixes, unboxing
forall U,u:Yotta<U>. Yotta<U> => U = u / 1000000000000000000000000;
forall U,u:Zetta<U>. Zetta<U> => U = u / 1000000000000000000000;
forall U,u:Exa<U>.   Exa<U>   => U = u / 1000000000000000000;
forall U,u:Peta<U>.  Peta<U>  => U = u / 1000000000000000;
forall U,u:Tera<U>.  Tera<U>  => U = u / 1000000000000;
forall U,u:Giga<U>.  Giga<U>  => U = u / 1000000000;
forall U,u:Mega<U>.  Mega<U>  => U = u / 1000000;
forall U,u:Kilo<U>.  Kilo<U>  => U = u / 1000;
forall U,u:Hecto<U>. Hecto<U> => U = u / 100;
forall U,u:Deca<U>.  Deca<U>  => U = u / 10;

forall U,u:Deci<U>.  Deci<U>  => U = 10 * u;
forall U,u:Centi<U>. Centi<U> => U = 100 * u;
forall U,u:Milli<U>. Milli<U> => U = 1000 * u;
forall U,u:Micro<U>. Micro<U> => U = 1000000 * u;
forall U,u:Nano<U>.  Nano<U>  => U = 1000000000 * u;
forall U,u:Pico<U>.  Pico<U>  => U = 1000000000000 * u;
forall U,u:Femto<U>. Femto<U> => U = 1000000000000000 * u;
forall U,u:Atto<U>.  Atto<U>  => U = 1000000000000000000 * u;
forall U,u:Zepto<U>. Zepto<U> => U = 1000000000000000000000 * u;
forall U,u:Yocto<U>. Yocto<U> => U = 1000000000000000000000000 * u;
