WHITESPACE = _{ " " | "\n" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") |
             ("//" ~ (!"\n" ~ ANY)*) }

alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }

ident = { !("forall") ~ (alpha | digit)+ }
ascript_ident = { ident ~ (":" ~ typ)? }

ident_term = { ident }	
tuple_term = { paren_atom }
ascript_term = { term_atom ~ (":" ~ typ)? }

paren_atom = { "(" ~ (term ~ ("," ~ term)*)? ~ ")" }
term_atom = { (ident_term | tuple_term) ~ (paren_atom)* }

term = { ascript_term }

ident_typ = { ident }
any_typ = { "?" }
paren_typ = { "(" ~ (typ ~ ("," ~ typ)*)? ~ ")" }
angle_typ = { "<" ~ (typ ~ ("," ~ typ)*)? ~ ">" }
brack_typ = { "[" ~ (typ ~ ("," ~ typ)*)? ~ "]" }
atom_typ  = { any_typ | paren_typ | ident_typ }
suffix_typ = { atom_typ ~ (brack_typ | angle_typ)* }
arrow_typ = { suffix_typ ~ ("->" ~ suffix_typ)* }
and_typ    = { arrow_typ ~ ("+" ~ arrow_typ)* }
or_typ    = { and_typ ~ ("|" ~ and_typ)* }
alias_typ = { or_typ ~ ("=>" ~ or_typ)* }
typ       = { alias_typ }

kind      = { ident ~ ("<" ~ kind_pars ~ ">")? }
kind_pars = { kind ~ ("," ~ kind)* }

let_stmt = { "let" ~ ident ~ let_stmt_val ~ let_stmt_typ }
let_stmt_val = { ("=" ~ term)? }
let_stmt_typ = { (":" ~ typ)? }

forall_stmt = { "forall" ~ forall_stmt_q ~ "." ~ typ ~ ("::" ~ kind)?}
forall_stmt_q = { ascript_ident? ~ ("," ~ ascript_ident)* }

stmt = { forall_stmt | let_stmt | term } 

file = { SOI ~ stmt? ~ (";" ~ stmt?)* ~ EOI }
