WHITESPACE = _{ " " | "\n" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") |
             ("//" ~ (!"\n" ~ ANY)*) }

upper = { 'A'..'Z' }
lower = { 'a'..'z' }
alpha = { 'a'..'z' | 'A'..'Z' }
alphal = { 'a'..'z' | 'A'..'Z' | "_" | "." }
digit = { '0'..'9' }
digital = { '0'..'9' | "_" | "." }
alnumop = { 'a'..'z' | 'A'..'Z' | '0'..'9' | "+" | "-" | "_" }

typname  = { upper ~ alpha* }
kindname = { upper ~ alpha* }
simplename = { alphal ~ (alphal | digit)* }
quotedname = { "$\"" ~ (!"\"" ~ ANY)+ ~ "\"" }
ident    = { !("let" | "forall" | "type") ~ (simplename | quotedname) }
constant = { digit ~ digital* ~ (("e"|"E") ~ ("+" | "-")? ~ digital+)? }
ident_typ_kind = { ident? ~ (":" ~ typ)? ~ ("::" ~ kind)? }

divmul_op = { "/" | "*" | "%" }
addsub_op = { "+" | "-" }

value_term = { ident | constant }
app_term = { (tuple_term | value_term) ~ (tuple_term)* }
tuple_term = { "(" ~ (term ~ ("," ~ term)*)? ~ ")" }
atom_term  = { app_term }
prefix_term = { atom_term }
divmul_term = { prefix_term ~ (divmul_op ~ prefix_term)* }
addsub_term = { divmul_term ~ (addsub_op ~ divmul_term)* }
infix_term = { addsub_term }
ascript_term = { infix_term ~ (":" ~ typ)? }
term = { ascript_term }

ident_typ = { typname }
any_typ = { "?" }
paren_typ = { "(" ~ (typ ~ ("," ~ typ)*)? ~ ")" }
angle_typ = { "<" ~ (typ ~ ("," ~ typ)*)? ~ ">" }
brack_typ = { "[" ~ (typ ~ ("," ~ typ)*)? ~ "]" }
atom_typ  = { any_typ | paren_typ | ident_typ }
suffix_typ = { atom_typ ~ (brack_typ | angle_typ)* }
product_typ = { suffix_typ ~ ("*" ~ suffix_typ)* }
ratio_typ = { product_typ ~ ("/" ~ product_typ)? }
arrow_typ = { ratio_typ ~ ("->" ~ ratio_typ)* }
and_typ    = { arrow_typ ~ ("+" ~ arrow_typ)* }
or_typ    = { and_typ ~ ("|" ~ and_typ)* }
typ       = { or_typ }

kind      = { kindname ~ ("<" ~ kind? ~ ("," ~ kind)* ~ ">")? }

let_stmt = { "let" ~ ident ~ let_stmt_par? ~ (":" ~ typ)? ~ ("::" ~ kind)? ~ ("=" ~ term)? }
let_stmt_par = { "(" ~ ident_typ_kind? ~ ("," ~ ident_typ_kind)* ~ ")" }

regex = { "/" ~ (!"/" ~ ANY)+ ~ "/" }
typedef_branch = { regex | typname }
typedef = { typedef_branch ~ ("|" ~ typedef_branch)* }
typ_stmt = { "type" ~ ident ~ ("<" ~ ident_typ_kind ~ ("," ~ ident_typ_kind)* ~ ">")? ~ (":" ~ typ)? ~ ("=" ~ typedef)? ~ ("::" ~ kind)? }

inference = { typ ~ ("=>" ~ typ)? }
forall_stmt = { "forall" ~ ident_typ_kind? ~ ("," ~ ident_typ_kind)* ~ "." ~ inference ~ ("=" ~ term)? ~ ("::" ~ kind)?}

stmt = { block | typ_stmt | forall_stmt | let_stmt | term } 

block = { "{" ~ stmt? ~ (";" ~ stmt?)* ~ "}" }
file = { SOI ~ stmt? ~ (";" ~ stmt?)* ~ EOI }
